services:
  backend:
    container_name: backend
    env_file:
      - ${ENV_FILE:-.env}
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:${BACKEND_PORT}"
    networks:
      - custom
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASS: ${POSTGRES_PASS}

    command: "gunicorn -c conf/gunicorn.conf.py 'auth.run:make_app()'"

  postgres:
    container_name: postgres
    image: postgres:13.0-alpine
    env_file:
      - ${ENV_FILE:-.env}
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASS}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - custom
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

    ports:
      - "2344:${POSTGRES_PORT}"

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    env_file:
      - ${ENV_FILE:-.env}
    ports:
      - "5672:${RABBITMQ_PORT}"
      - "15672:${RABBITMQ_PORT_ADMIN}"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    networks:
      - custom
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_running" ]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  custom:
    driver: bridge
